---
title: Finally Nokia Qt SDK supports Ubuntu GNU/Linux
category: programming
---

Finally we can develop native (Qt) Symbian apps on GNU/Linux with official tools from Nokia? It's just amazing to see the simplicity and features of newly released __[Nokia Qt SDK](http://www.forum.nokia.com/info/sw.nokia.com/id/e920da1a-5b18-42df-82c3-907413e525fb/Nokia_Qt_SDK.html)__ - officially supproting Ubuntu GNU/Linux! 

_But is this it? Develop Qt Symbian, Maemo apps from one QtCreator on Ubuntu?_ __Well not yet for Symbian on linux in this current 1.0 release yet__ as per the [comments in their blog](http://labs.trolltech.com/blogs/2010/06/23/nokia-qt-sdk-10-released/) but you can [use Remote Compilation for the time being](http://wiki.forum.nokia.com/index.php/Nokia_Qt_SDK_Remote_Compiler). (You can install it using SDKMaintenanceTool and then see the QtCreator Help about it.)

After waiting and using <a href='http://www.clearevo.com/blog/programming/2009/06/05/symbian_c%2B%2B_on_linux_using_gnupoc_and_eclipse_cdt.html'>unofficial tools like gnupoc with eclipse cdt to develop native Symbian C++ applications</a> for a long while. This Nokia Qt SDK looks promising for new future Qt apps.

I've been programming Native Symbian C++ for a few years and I still say that many times it is a hassle just to develop/program a simple task (things got much easier thanks to the very helpful Forum Nokia Wiki Symbian C++ code examples and discussion boards) - after trying Qt in my computer apps like Ookjor and AgilePresenter - I can say that Qt is truly amazingly simple and "right" in many ways - far simpler to get a task done (while still having the native C and C++ "engine" strength) far "cute" and smart in my opinion than other UI tools I've tried in the past: MFC (when I was younger, still locked to windows), wxWidgets, native S60 Avkon C++...

I like the VLC media player approach: develop the core engine of the app in native_standard_ANSI_C and then you can use whatever UI you like - and now it's Qt (VLC now uses Qt for their UI too). Although Symbian and Qt are Object Oriented C++ based, C++/OO seems to suit GUI programming and business apps where there are easily mapped to real "objects". However, every language has its stregths and weakness and suitable job - C++ doesn't suit deeper or lower-level programming like hex/communications stuff in my opinion. I'm really tired of adding/adjusting new features into an old C++ app engines for my current kind of work: making wireless protocol decoding engines (GSM RR/CC/MM) - standard C fits the job far better in my view - my new app engines are all in ansi C - it get things done more simply and leaves a lot of room for change - instead of wasting too much time on just coding the "OO design" hierrachy then after a year or two they become a huge mess when adapting to new paradigms and needs. Something like what was [expressed by Linus Torvalrds in a (strong comments) reply about why git wasn't in C++](http://harmful.cat-v.org/software/c++/linus). We can see that deeper stuff like the linux kernel, OsmocomBB, OpenCV, apache2 httpd, lighttpd, wireshark, imagemagick are in native C, while UIs and business apps are suitable for OO languages like C++, Java, Ruby, etc.